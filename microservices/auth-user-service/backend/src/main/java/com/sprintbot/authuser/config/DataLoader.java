package com.sprintbot.authuser.config;

import com.sprintbot.authuser.entity.*;
import com.sprintbot.authuser.repository.UtilisateurRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDate;

/**
 * Chargeur de donn√©es initial pour le microservice auth-user-service
 * Cr√©e les utilisateurs par d√©faut au d√©marrage de l'application
 */
@Component
public class DataLoader implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataLoader.class);

    @Autowired
    private UtilisateurRepository utilisateurRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        logger.info("üîÑ Initialisation des donn√©es par d√©faut...");
        
        try {
            createDefaultUsers();
            logger.info("‚úÖ Donn√©es par d√©faut cr√©√©es avec succ√®s !");
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de la cr√©ation des donn√©es par d√©faut: {}", e.getMessage());
        }
    }

    /**
     * Cr√©e les utilisateurs par d√©faut s'ils n'existent pas d√©j√†
     */
    private void createDefaultUsers() {
        // Cr√©ation de l'administrateur par d√©faut
        createAdminIfNotExists();
        
        // Cr√©ation du coach par d√©faut
        createCoachIfNotExists();
        
        // Cr√©ation du joueur par d√©faut
        createJoueurIfNotExists();
        
        // Cr√©ation du staff m√©dical par d√©faut
        createStaffMedicalIfNotExists();
        
        // Cr√©ation du responsable financier par d√©faut
        createResponsableFinancierIfNotExists();
    }

    /**
     * Cr√©e un administrateur par d√©faut
     */
    private void createAdminIfNotExists() {
        String email = "admin@sprintbot.com";
        
        if (!utilisateurRepository.existsByEmail(email)) {
            Administrateur admin = new Administrateur(
                "Admin", 
                "Super", 
                email, 
                passwordEncoder.encode("admin123")
            );
            
            // Configuration sp√©cifique √† l'administrateur
            admin.setDepartement("Administration G√©n√©rale");
            admin.setNiveauAcces("SUPER_ADMIN");
            admin.setPeutGererUtilisateurs(true);
            admin.setPeutGererFinances(true);
            admin.setPeutGererPlanning(true);
            admin.setPeutVoirRapports(true);
            admin.setPeutModifierSysteme(true);
            admin.setTelephone("+216 20 123 456");
            admin.setNotes("Administrateur principal du syst√®me SprintBot");
            
            utilisateurRepository.save(admin);
            logger.info("üë®‚Äçüíº Administrateur cr√©√©: {} ({})", admin.getNomComplet(), email);
        } else {
            logger.info("üë®‚Äçüíº Administrateur existe d√©j√†: {}", email);
        }
    }

    /**
     * Cr√©e un coach par d√©faut
     */
    private void createCoachIfNotExists() {
        String email = "coach@sprintbot.com";
        
        if (!utilisateurRepository.existsByEmail(email)) {
            Coach coach = new Coach(
                "Dupont", 
                "Jean", 
                email, 
                passwordEncoder.encode("coach123"),
                "Entra√Ænement g√©n√©ral et tactique"
            );
            
            // Configuration sp√©cifique au coach
            coach.setTypeCoach("PRINCIPAL");
            coach.setExperience(10);
            coach.setCertification("Niveau 3 FIVB");
            coach.setFormation("Master STAPS - Volley-ball");
            coach.setDateDebutCarriere(LocalDate.of(2014, 9, 1));
            coach.setSalaire(3500.0);
            coach.setTelephone("+216 20 234 567");
            coach.setBiographie("Coach principal avec 10 ans d'exp√©rience en volley-ball professionnel");
            
            utilisateurRepository.save(coach);
            logger.info("üèê Coach cr√©√©: {} ({})", coach.getNomComplet(), email);
        } else {
            logger.info("üèê Coach existe d√©j√†: {}", email);
        }
    }

    /**
     * Cr√©e un joueur par d√©faut
     */
    private void createJoueurIfNotExists() {
        String email = "joueur@sprintbot.com";
        
        if (!utilisateurRepository.existsByEmail(email)) {
            Joueur joueur = new Joueur(
                "Martin", 
                "Pierre", 
                email, 
                passwordEncoder.encode("joueur123")
            );
            
            // Configuration sp√©cifique au joueur
            joueur.setTaille(1.85f);
            joueur.setPoids(78.5f);
            joueur.setPoste("Attaquant");
            joueur.setDateNaissance(LocalDate.of(1995, 3, 15));
            joueur.setNumeroMaillot(12);
            joueur.setNationalite("Tunisienne");
            joueur.setExperienceAnnees(8);
            joueur.setNiveau("AVANCE");
            joueur.setMainDominante("DROITE");
            joueur.setTelephone("+216 20 345 678");
            
            utilisateurRepository.save(joueur);
            logger.info("üèê Joueur cr√©√©: {} ({})", joueur.getNomComplet(), email);
        } else {
            logger.info("üèê Joueur existe d√©j√†: {}", email);
        }
    }

    /**
     * Cr√©e un membre du staff m√©dical par d√©faut
     */
    private void createStaffMedicalIfNotExists() {
        String email = "medecin@sprintbot.com";
        
        if (!utilisateurRepository.existsByEmail(email)) {
            StaffMedical staff = new StaffMedical(
                "Benali", 
                "Fatma", 
                email, 
                passwordEncoder.encode("medecin123"),
                "M√©decine du sport"
            );
            
            // Configuration sp√©cifique au staff m√©dical
            staff.setTypeStaff("MEDECIN");
            staff.setNumeroLicence("MED-2024-001");
            staff.setFormation("Doctorat en M√©decine du Sport");
            staff.setExperienceAnnees(12);
            staff.setDateCertification(LocalDate.of(2012, 6, 15));
            staff.setDateExpirationLicence(LocalDate.of(2025, 6, 15));
            staff.setPeutPrescrire(true);
            staff.setPeutDiagnostiquer(true);
            staff.setDisponibleUrgence(true);
            staff.setNumeroUrgence("+216 20 456 789");
            staff.setTelephone("+216 71 123 456");
            staff.setSalaire(4000.0);
            staff.setQualifications("Sp√©cialiste en traumatologie sportive, Dipl√¥me en nutrition sportive");
            
            utilisateurRepository.save(staff);
            logger.info("üè• Staff m√©dical cr√©√©: {} ({})", staff.getNomComplet(), email);
        } else {
            logger.info("üè• Staff m√©dical existe d√©j√†: {}", email);
        }
    }

    /**
     * Cr√©e un responsable financier par d√©faut
     */
    private void createResponsableFinancierIfNotExists() {
        String email = "financier@sprintbot.com";
        
        if (!utilisateurRepository.existsByEmail(email)) {
            ResponsableFinancier responsable = new ResponsableFinancier(
                "Trabelsi", 
                "Ahmed", 
                email, 
                passwordEncoder.encode("financier123")
            );
            
            // Configuration sp√©cifique au responsable financier
            responsable.setDepartement("Finances et Comptabilit√©");
            responsable.setNiveauAutorisation("SENIOR");
            responsable.setLimiteApprobation(15000.0);
            responsable.setPeutApprouverBudgets(true);
            responsable.setPeutVoirSalaires(true);
            responsable.setPeutModifierTarifs(false);
            responsable.setPeutGenererRapports(true);
            responsable.setFormation("Master en Finance");
            responsable.setCertification("Expert-comptable");
            responsable.setExperienceAnnees(15);
            responsable.setSalaire(3800.0);
            responsable.setTelephone("+216 20 567 890");
            responsable.setResponsabilites("Gestion budg√©taire, contr√¥le des d√©penses, reporting financier");
            
            utilisateurRepository.save(responsable);
            logger.info("üí∞ Responsable financier cr√©√©: {} ({})", responsable.getNomComplet(), email);
        } else {
            logger.info("üí∞ Responsable financier existe d√©j√†: {}", email);
        }
    }
}
